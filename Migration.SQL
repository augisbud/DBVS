START TRANSACTION;

CREATE TABLE "Clients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Title" text NOT NULL,
    "RegistrationCode" text NOT NULL,
    "VAT" text NOT NULL,
    "AddressStreet" text NOT NULL,
    "AddressCity" text NOT NULL,
    "AddressZipCode" text NOT NULL,
    "Email" text NOT NULL,
    "PhoneNumber" text NOT NULL,
    CONSTRAINT "PK_Clients" PRIMARY KEY ("Id"),
    CONSTRAINT "CHK_Clients_Email_Format" CHECK ("Email" ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

CREATE TABLE "Products" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Title" text NOT NULL,
    "Price" money NOT NULL CHECK ("Price" >= '0'::money AND "Price" <= '10000'::money),
    "AvailableQuantity" integer NOT NULL CHECK ("AvailableQuantity" >= 0 AND "AvailableQuantity" <= 1000),
    CONSTRAINT "PK_Products" PRIMARY KEY ("Id")
);

CREATE TABLE "Invoices" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Title" text NOT NULL,
    "Markup" integer NOT NULL DEFAULT 0 CHECK ("Markup" >= 0 AND "Markup" <= 100),
    "Discount" money NOT NULL CHECK ("Discount" >= '0'::money AND "Discount" <= '5000'::money),
    "Notes" text NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "ClientId" integer NOT NULL,
    CONSTRAINT "PK_Invoices" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Invoices_Clients_ClientId" FOREIGN KEY ("ClientId") REFERENCES "Clients" ("Id") ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE "InvoiceProducts" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Title" text NOT NULL,
    "Price" money NOT NULL CHECK ("Price" >= '0'::money AND "Price" <= '10000'::money),
    "Quantity" integer NOT NULL CHECK ("Quantity" > 0 AND "Quantity" <= 100),
    "InvoiceId" integer NOT NULL,
    "ProductId" integer NOT NULL,
    CONSTRAINT "PK_InvoiceProducts" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_InvoiceProducts_Invoices_InvoiceId" FOREIGN KEY ("InvoiceId") REFERENCES "Invoices" ("Id") ON DELETE CASCADE ON UPDATE RESTRICT,
    CONSTRAINT "FK_InvoiceProducts_Products_ProductId" FOREIGN KEY ("ProductId") REFERENCES "Products" ("Id") ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE "Payments" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Amount" money NOT NULL CHECK ("Amount" > '0'::money AND "Amount" <= '100000'::money),
    "Date" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "Method" text NOT NULL CHECK ("Method" ~* '^(Credit Card|Bank Transfer|Cash)$'),
    "InvoiceId" integer NOT NULL,
    CONSTRAINT "PK_Payments" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Payments_Invoices_InvoiceId" FOREIGN KEY ("InvoiceId") REFERENCES "Invoices" ("Id") ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX "IX_Clients_Email" ON "Clients" ("Email");

CREATE UNIQUE INDEX "IX_Clients_RegistrationCode" ON "Clients" ("RegistrationCode");

CREATE INDEX "IX_InvoiceProducts_InvoiceId" ON "InvoiceProducts" ("InvoiceId");

CREATE INDEX "IX_InvoiceProducts_ProductId" ON "InvoiceProducts" ("ProductId");

CREATE INDEX "IX_Invoices_ClientId" ON "Invoices" ("ClientId");

CREATE INDEX "IX_Payments_InvoiceId" ON "Payments" ("InvoiceId");

CREATE VIEW "ClientAddresses" AS
SELECT
    "Id",
    "Title",
    "Email",
    "PhoneNumber",
    "AddressStreet" || ', ' || "AddressCity" || ', ' || "AddressZipCode" AS "Address"
FROM
    "Clients";

CREATE VIEW "InvoiceTotalAmounts" AS
SELECT
    i."Id" AS "InvoiceId",
    SUM(ip."Price" * ip."Quantity") AS "TotalAmount",
    SUM(ip."Price" * ip."Quantity") - i."Discount" + i."Markup"::money AS "FinalAmount"
FROM
    "Invoices" i
INNER JOIN
    "InvoiceProducts" ip ON i."Id" = ip."InvoiceId"
GROUP BY
    i."Id", i."Discount", i."Markup";

CREATE VIEW "ProductSummary" AS
SELECT
    p."Id" AS "ProductId",
    p."Title",
    SUM(ip."Quantity") AS "TotalQuantity",
    SUM(ip."Price" * ip."Quantity") AS "TotalValue"
FROM
    "Products" p
INNER JOIN
    "InvoiceProducts" ip ON p."Id" = ip."ProductId"
GROUP BY
    p."Id", p."Title";

CREATE MATERIALIZED VIEW "MaterializedProductSales" AS
SELECT
    p."Id" AS "ProductId",
    p."Title",
    SUM(ip."Quantity") AS "TotalSoldQuantity",
    SUM(ip."Price" * ip."Quantity") AS "TotalRevenue"
FROM
    "Products" p
LEFT JOIN
    "InvoiceProducts" ip ON p."Id" = ip."ProductId"
GROUP BY
    p."Id", p."Title";

CREATE OR REPLACE FUNCTION refresh_materialized_product_sales()
RETURNS void AS $$
BEGIN
    REFRESH MATERIALIZED VIEW "MaterializedProductSales";
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION trigger_refresh_materialized_product_sales()
RETURNS TRIGGER AS $$
BEGIN
    PERFORM refresh_materialized_product_sales();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_refresh_materialized_product_sales
AFTER INSERT OR DELETE OR UPDATE ON "InvoiceProducts"
FOR EACH STATEMENT
EXECUTE FUNCTION trigger_refresh_materialized_product_sales();

CREATE OR REPLACE FUNCTION update_product_quantity()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE "Products"
        SET "AvailableQuantity" = "AvailableQuantity" - NEW."Quantity"
        WHERE "Id" = NEW."ProductId";

    ELSIF TG_OP = 'DELETE' THEN
        UPDATE "Products"
        SET "AvailableQuantity" = "AvailableQuantity" + OLD."Quantity"
        WHERE "Id" = OLD."ProductId";
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_product_quantity
AFTER INSERT OR DELETE ON "InvoiceProducts"
FOR EACH ROW
EXECUTE FUNCTION update_product_quantity();

CREATE OR REPLACE FUNCTION prevent_overpayment()
RETURNS TRIGGER AS $$
DECLARE
    total_paid money;
    invoice_amount money;
BEGIN
    SELECT SUM("Amount") INTO total_paid FROM "Payments" WHERE "InvoiceId" = NEW."InvoiceId";
    SELECT SUM(ip."Price" * ip."Quantity") - i."Discount" + i."Markup"::money
    INTO invoice_amount
    FROM "Invoices" i
    JOIN "InvoiceProducts" ip ON i."Id" = ip."InvoiceId"
    WHERE i."Id" = NEW."InvoiceId"
    GROUP BY i."Id", i."Discount", i."Markup";

    IF (total_paid + NEW."Amount") > invoice_amount THEN
        RAISE EXCEPTION 'Payment exceeds invoice amount. Total paid: %, Invoice amount: %', total_paid + NEW."Amount", invoice_amount;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_prevent_overpayment
BEFORE INSERT ON "Payments"
FOR EACH ROW
EXECUTE FUNCTION prevent_overpayment();

CREATE OR REPLACE FUNCTION prevent_modification_if_paid()
RETURNS TRIGGER AS $$
DECLARE
    payment_exists BOOLEAN;
    invoice_id INTEGER;
BEGIN
    IF TG_TABLE_NAME = 'Invoices' THEN
        invoice_id := NEW."Id";
    ELSIF TG_TABLE_NAME = 'InvoiceProducts' THEN
        invoice_id := COALESCE(NEW."InvoiceId", OLD."InvoiceId");
    ELSE
        RAISE EXCEPTION 'Unexpected table: %', TG_TABLE_NAME;
    END IF;

    SELECT EXISTS (
        SELECT 1 FROM "Payments" WHERE "InvoiceId" = invoice_id
    ) INTO payment_exists;

    IF payment_exists THEN
        RAISE EXCEPTION 'Negalima keisti jau apmokėtos sąskaitos.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_prevent_invoice_update_if_paid
BEFORE UPDATE ON "Invoices"
FOR EACH ROW
EXECUTE FUNCTION prevent_modification_if_paid();

CREATE TRIGGER trg_prevent_invoice_products_insert_if_paid
BEFORE INSERT ON "InvoiceProducts"
FOR EACH ROW
EXECUTE FUNCTION prevent_modification_if_paid();

CREATE TRIGGER trg_prevent_invoice_products_update_if_paid
BEFORE UPDATE ON "InvoiceProducts"
FOR EACH ROW
EXECUTE FUNCTION prevent_modification_if_paid();

CREATE TRIGGER trg_prevent_invoice_products_delete_if_paid
BEFORE DELETE ON "InvoiceProducts"
FOR EACH ROW
EXECUTE FUNCTION prevent_modification_if_paid();

COMMIT;

START TRANSACTION;

INSERT INTO "Clients" ("Title", "RegistrationCode", "VAT", "AddressStreet", "AddressCity", "AddressZipCode", "Email", "PhoneNumber")
VALUES
    ('Client A', 'REG123', 'VAT123', '123 Elm St', 'Metropolis', '12345', 'clienta@example.com', '+1234567890'),
    ('Client B', 'REG456', 'VAT456', '456 Oak St', 'Gotham', '67890', 'clientb@example.com', '+0987654321');

INSERT INTO "Products" ("Title", "Price", "AvailableQuantity")
VALUES
    ('Product X', 100.00::money, 50),
    ('Product Y', 150.00::money, 30),
    ('Product Z', 200.00::money, 20);

INSERT INTO "Invoices" ("Title", "Markup", "Discount", "Notes", "ClientId")
VALUES
    ('Invoice 1', 10, 5.00::money, 'First Invoice', 1),
    ('Invoice 2', 20, 10.00::money, 'Second Invoice', 2);

INSERT INTO "InvoiceProducts" ("Title", "Price", "Quantity", "InvoiceId", "ProductId")
VALUES
    ('Product X on Invoice 1', 100.00::money, 2, 1, 1),
    ('Product Y on Invoice 1', 150.00::money, 1, 1, 2),
    ('Product Z on Invoice 2', 200.00::money, 3, 2, 3);

INSERT INTO "Payments" ("Amount", "Method", "InvoiceId")
VALUES
    (10.00::money, 'Credit Card', 1),
    (10.00::money, 'Bank Transfer', 2);

COMMIT;